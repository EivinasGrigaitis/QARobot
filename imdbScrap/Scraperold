using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;

namespace imdbScrap
{
    public class Scraper
    {
        private IWebDriver _driver;
        private readonly string _baseUrl = "http://www.imdb.com";

        readonly List<string> _actorList = new List<string>
        {
            "Johnny Depp",
            "Al Pacino"

        };

        public Scraper(List<string> actorList = null)
        {
            _driver = new FirefoxDriver();
            Actors = new HashSet<Actor>();
            Films = new HashSet<Film>();
            _scraped = false;

            if (actorList != null)
                _actorList = actorList;
        }

        public HashSet<Actor> Actors;

        public HashSet<Film> Films;

        private bool _scraped; 

        public List<Actor> GetActors()
        {
            if (!_scraped)
            {
                Scrape();
            }

            return Actors.ToList();
        }

        public List<Film> GetUniqueFilms()
        {
            if (!_scraped)
            {
                Scrape();
            }

            return Films.ToList();
        }

        

        private void FromActorToFeatureFilms(string actorNum)
        {
            // Select sorted by rating
            _driver.Navigate().GoToUrl(_baseUrl + "/filmosearch?sort=user_rating&explore=title_type&role=" + actorNum
                + "&ref_=nm_flmg_shw_3");

            // Click "Feature film"
            _driver.FindElement(By.Name("movie")).Click();
            // Wait while it loads
            System.Threading.Thread.Sleep(3000);
        }

        private void Scrape()
        {
            foreach (string actor in _actorList)
            {
                Console.WriteLine($"-- Scraping movies for {actor}. . . --");

                string name = actor.Split(' ')[0];
                string surname = actor.Split(' ')[1];
                
                var currentActor = new Actor(name, surname);

                _driver.Navigate().GoToUrl(_baseUrl + "/?ref_=nv_home");

                GoToActorPage(actor);

                string url;
                string actorNum;
                while (true)
                {
                    try
                    {
                        url = _driver.Url;
                        actorNum = url.Split('/')[4];
                        break;
                    }
                    catch (IndexOutOfRangeException)
                    {
                    }
                }

                currentActor.Born = GetActorsBornDate();

                FromActorToFeatureFilms(actorNum);


                // Scrape the page
                while (true)
                {
                    foreach (var elem in _driver.FindElements(By.ClassName("lister-item-content")))
                    {
                        var film = new Film(GetFilmName(elem), GetFilmRating(elem), GetFilmYear(elem)) {Genre = GetFilmGenre(elem)};

                        Films.Add(film);
                        currentActor.Films.Add(film);
                    }


                    if (!TryNextPage()) break;
                }

                Actors.Add(currentActor);
                Console.WriteLine($"-- Done scraping for {actor} --");
            }

        _driver.Quit();
        _scraped = true;

        }

        private string GetFilmYear(IWebElement elem)
        {
            //return elem.FindElements(By.ClassName("unbold"))[1].Text.Replace('(', ' ').Replace(')', ' ');
            var match = Regex.Match(elem.FindElements(By.ClassName("unbold"))[1].Text, @"\((\d{4})\)").Groups[1];
            return match.Value;
        }

        private string GetFilmName(IWebElement elem)
        {
            return elem.FindElement(By.ClassName("lister-item-header")).FindElement(By.TagName("a")).Text;
        }

        private bool TryNextPage()
        {
            try
            {
                _driver.FindElement(By.ClassName("next-page")).Click();
                System.Threading.Thread.Sleep(2000);
                return true;
            }
            catch (NoSuchElementException)
            {
                return false;
            }
        }

        private string GetFilmGenre(IWebElement elem)
        {
            try
            {
                return 
                    elem.FindElement(By.ClassName("genre")).Text;
            }
            catch (NoSuchElementException)
            {
                return "";
            }
        }

        private decimal GetFilmRating(IWebElement elem)
        {
            try
            {
                string originalRating = elem.FindElement(By.ClassName("ratings-imdb-rating"))
                    .FindElement(By.TagName("strong")).Text.Replace(',', '.');

                return
                    decimal.Parse(originalRating);
            }
            catch (NoSuchElementException)
            {
                return 0m;
            }
        }
        private void GoToActorPage(string actor)
        {
            _driver.FindElement(By.Id("navbar-query")).Click();
            _driver.FindElement(By.Id("navbar-query")).Clear();
            _driver.FindElement(By.Id("navbar-query")).SendKeys(actor);
            System.Threading.Thread.Sleep(500);
            _driver.FindElement(By.ClassName("suggestionlabel")).Click();
        }

        private string GetActorsBornDate()
        {
            try
            {
                return _driver.FindElement(By.Id("name-born-info"))
                    .FindElement(By.TagName("time"))
                    .GetAttribute("datetime");
            }
            catch (NoSuchElementException)
            {
                return "";
            }
        }
    }

    public class Actor
    {
        public string _name;
        public string _surname;
        public HashSet<Film> Films;
        public string Born;

        public Actor(string name, string surname)
        {
            _name = name;
            _surname = surname;
            Films = new HashSet<Film>();
            Born = null;
        }

        public override string ToString()
        {
            return $"{_name} {_surname} - {Films.Count} films";
        }

        public override bool Equals(object obj)
        {
            return ToString() == obj.ToString();
        }

        public override int GetHashCode()
        {
            return ToString().GetHashCode();
        }
    }

    public class Film
    {
        public string Name;
        public decimal Rating;
        public string Genre;
        public string Year;

        public Film(string name, decimal rating, string year)
        {
            Name = name;
            Rating = rating;
            Year = year;
            Genre = "";
        }

        public override string ToString()
        {
            return $"{Name} - {Rating}";
        }

        public override bool Equals(object obj)
        {
            return ToString() == obj.ToString();
        }

        public override int GetHashCode()
        {
            return ToString().GetHashCode();
        }
    }
}
